import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as d,c as v,a,w as p,b as n,d as s,e as l}from"./app-C90w3lXH.js";const m="/img/proxy/proxy-1.png",g="/img/proxy/proxy-2.png",y="/img/proxy/proxy-3.png",h="/img/proxy/proxy-4.png",b="/img/proxy/proxy-5.png",f="/img/proxy/proxy-6.png",x="/img/proxy/proxy-demo.png",_="/img/proxy/alist-proxy-2.png",w={},q={style:{"text-align":"right"}},A={href:"https://www.bilibili.com/video/BV17N411S7fg",target:"_blank",rel:"noopener noreferrer"},L=n("strong",null,"BV17N411S7fg",-1),T={style:{"text-align":"right"}},S={href:"https://www.youtube.com/watch?v=jAGl3tIO6qc",target:"_blank",rel:"noopener noreferrer"},R=n("strong",null,"jAGl3tIO6qc",-1),E=n("h2",{id:"下载代理-url",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#下载代理-url"},[n("span",null,[n("strong",null,"下载代理 URL")])])],-1),O=n("p",null,"开启代理时不填写下载代理 URL字段，默认使用本机进行传输。下载代理 URL提供了两种代理方式安装：",-1),C=n("p",null,"可以使用 Cloudflare Workers 做代理，这里填写 Workers 地址即可。",-1),U={href:"https://github.com/alist-org/alist-proxy/blob/main/alist-proxy.js",target:"_blank",rel:"noopener noreferrer"},N=n("ul",null,[n("li",null,[s("ADDRESS: 你的 AList 地址，必须加上协议头，后面不能跟 "),n("code",null,"/"),s("。如 "),n("code",null,"https://pan.nn.ci"),s("；")]),n("li",null,"TOKEN: 在 AList 管理页面中进入“其他设置”得到。")],-1),P=n("p",null,"⚠️ Cloudflare Workers 中转AList，AList的端口只能跑在80或者443 否则cf不给入站(否则无法进行中转代理)",-1),D=n("ul",null,[n("li",null,[s("在AList后台挂载配置时 填写 "),n("strong",null,"下载代理URL"),s(" 时候的 链接结尾 不可以带 "),n("code",null,"/")])],-1),W=n("p",null,[s("详细文字教程："),n("a",{href:"#_1-cloudflare-workers"},"点击查看")],-1),H={href:"https://github.com/alist-org/alist-proxy/releases",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"./alist-proxy -help",-1),B=n("p",null,[s("详细文字教程："),n("a",{href:"#_2-%E9%80%9A%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6"},"点击查看")],-1),z=n("p",null,"我们下面正式开始吧介绍吧",-1),I=n("hr",null,null,-1),Y=n("h3",{id:"_1-cloudflare-workers",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-cloudflare-workers"},[n("span",null,"1. Cloudflare Workers")])],-1),F=n("i",{class:"fa-brands fa-cloudflare",style:{color:"#409eff"}},null,-1),M={href:"https://www.cloudflare.com/zh-cn",target:"_blank",rel:"noopener noreferrer"},Q=n("strong",null,"Workers和Pages",-1),V=n("figure",null,[n("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),K=n("p",null,[s("新建应用程序的名字随便写，自己知道是做什么的就行，为了方便这里起名叫 "),n("code",null,"alist-proxy"),s("，至于里面的内容不用管，点击部署即可。")],-1),Z=n("figure",null,[n("img",{src:g,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),G=n("p",null,[s("点击部署后我们会自动跳转到新建的 "),n("strong",null,"Workers"),s(" 应用程序內，我们在右上角点击 快速编辑 进行修改。")],-1),J=n("figure",null,[n("img",{src:y,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),$={href:"https://github.com/alist-org/alist-proxy/blob/main/alist-proxy.js",target:"_blank",rel:"noopener noreferrer"},X=n("strong",null,"proxy.js",-1),nn=n("strong",null,"Workers",-1),sn=l(`<ul><li><p>&quot;YOUR_ADDRESS&quot;：我们改成需要被代理的AList链接，链接需要携带请求头 HTTP或者HTTPS，链接最面不可以带 <code>/</code></p></li><li><p>&quot;YOUR_TOKEN&quot;：你的AList Token，直接去AList后台 --&gt; 设置 --&gt; 其他 --&gt; <strong>令牌</strong>，填写进去 不需要抓包！！</p></li></ul><details class="hint-container details"><summary>proxy.js 备用</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// src/const.ts</span>
<span class="token keyword">var</span> <span class="token constant">ADDRESS</span> <span class="token operator">=</span> <span class="token string">&quot;YOUR_ADDRESS&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token constant">TOKEN</span> <span class="token operator">=</span> <span class="token string">&quot;YOUR_TOKEN&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// src/verify.ts</span>
<span class="token keyword">var</span> <span class="token function-variable function">verify</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> _sign</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> signSlice <span class="token operator">=</span> _sign<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>signSlice<span class="token punctuation">[</span>signSlice<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;expire missing&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> expire <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>signSlice<span class="token punctuation">[</span>signSlice<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>expire<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;expire invalid&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>expire <span class="token operator">&lt;</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1e3</span> <span class="token operator">&amp;&amp;</span> expire <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;expire expired&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">hmacSha256Sign</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> expire<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>_sign <span class="token operator">!==</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;sign mismatch&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token function-variable function">hmacSha256Sign</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> expire</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token keyword">await</span> crypto<span class="token punctuation">.</span>subtle<span class="token punctuation">.</span><span class="token function">importKey</span><span class="token punctuation">(</span>
    <span class="token string">&quot;raw&quot;</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">TextEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token constant">TOKEN</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;HMAC&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">hash</span><span class="token operator">:</span> <span class="token string">&quot;SHA-256&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&quot;sign&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;verify&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> buf <span class="token operator">=</span> <span class="token keyword">await</span> crypto<span class="token punctuation">.</span>subtle<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;HMAC&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">hash</span><span class="token operator">:</span> <span class="token string">&quot;SHA-256&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    key<span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">TextEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>expire<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">btoa</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;_&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> expire<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// src/handleDownload.ts</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleDownload</span><span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> origin <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;origin&quot;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> sign <span class="token operator">=</span> url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;sign&quot;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> verifyResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">verify</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> sign<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>verifyResult <span class="token operator">!==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> resp2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>
      <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">401</span><span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> verifyResult
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">&quot;content-type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json;charset=UTF-8&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    resp2<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span> origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> resp2<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">ADDRESS</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/api/fs/link</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;content-type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json;charset=UTF-8&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">Authorization</span><span class="token operator">:</span> <span class="token constant">TOKEN</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      path
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> resp<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>url<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
  request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">&quot;follow&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>header<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> k <span class="token keyword">in</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>header<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>header<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
  response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;set-cookie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span> origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
  response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Vary&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Origin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// src/handleOptions.ts</span>
<span class="token keyword">function</span> <span class="token function">handleOptions</span><span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> corsHeaders <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;Access-Control-Allow-Origin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;Access-Control-Allow-Methods&quot;</span><span class="token operator">:</span> <span class="token string">&quot;GET,HEAD,POST,OPTIONS&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;Access-Control-Max-Age&quot;</span><span class="token operator">:</span> <span class="token string">&quot;86400&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> headers <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;Origin&quot;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Request-Method&quot;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> respHeaders <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>corsHeaders<span class="token punctuation">,</span>
      <span class="token string-property property">&quot;Access-Control-Allow-Headers&quot;</span><span class="token operator">:</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Request-Headers&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">headers</span><span class="token operator">:</span> respHeaders
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">Allow</span><span class="token operator">:</span> <span class="token string">&quot;GET, HEAD, POST, OPTIONS&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// src/index.ts</span>
<span class="token keyword">var</span> src_default <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> env<span class="token punctuation">,</span> ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">&quot;OPTIONS&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">handleOptions</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">handleDownload</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>
  src_default <span class="token keyword">as</span> <span class="token keyword">default</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//# sourceMappingURL=index.js.map</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><figure><img src="`+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>回到 <strong>Workers</strong> 应用程序后下拉一点儿，找到触发器选项，然后点击右下角的添加路由</p>',4),an=n("i",{class:"fa-brands fa-cloudflare",style:{color:"#409eff"}},null,-1),tn={href:"https://www.cloudflare.com/zh-cn",target:"_blank",rel:"noopener noreferrer"},pn=n("strong",null,"Workers",-1),en={href:"http://alist-proxy.alist.org/*",target:"_blank",rel:"noopener noreferrer"},on=n("ul",null,[n("li",null,[s("⚠️ 注意结尾的 "),n("code",null,"/*"),s("必须要携带")])],-1),ln={href:"http://alist.org",target:"_blank",rel:"noopener noreferrer"},cn=l('<p>添加好保存后，会在下面看到我们添加的路由</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>路由添加完了，我们回到首页点击左侧侧边栏顶部的网站，找到我们解析的域名点击进去，进入域名內后左侧找到 <strong><code>DNS</code></strong> 选择记录，我们添加一个记录</p><p>这个记录有三种办法，以及一个其他</p><ol><li>类型选择<code>CNAME</code>，名称正常写(解析访问使用的-例如也叫<code>alist-proxy</code>)，目标：写我们上一张图添加完路由后显示的链接上面那个，<code>alist-proxxxorkers.dev</code></li><li>类型选择<code>A</code>，名称正常写(解析访问使用的-例如也叫<code>alist-proxy</code>)，IP地址，写我们优选的cloudflare IP，至于怎么优选看你自己了</li><li>类型选择<code>CNAME</code>，名称正常写(解析访问使用的-例如也叫<code>alist-proxy</code>)，目标：写大佬优选好的IP负载(合集)（下面三句话是大佬原话懂得自己操作） <ul><li>1.可以优选后添加到另外的域名做cname，2.和域名负载均衡方法一样 多个同样的A记录 不同的ip，3.然后cf那边cname那个二级域名就是了</li></ul></li><li><s>host本地优选劫持 ( 这个其他的比较特殊，我也不会是大佬告诉我的,不知道忽略即可)</s></li></ol><p>⚠️⚠️⚠️ <mark>以上三种办法添加记录的时候都需要把 <strong><code>小云朵</code></strong> 关闭</mark></p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>到这里已经已经搭建好了，下面我们去测试一下吧，先去AList后台挂载的<code>下载代理URL</code>里面填写一下域名，什么?不知道填那个?</p><p>填我们 上一步添加记录时的的名称 我们解析的是 <code>alist-proxy</code>，是在alist.org这个域名內解析的</p>',9),rn=n("code",null,"下载代理URL",-1),un={href:"https://alist-proxy.alist.org",target:"_blank",rel:"noopener noreferrer"},kn=l('<p>（这个只能是给填写 proxy.js 时里面提到的域名使用 别人无法使用）</p><p>下面的就是我们测试的，原本这个是302直连的，我们改成了下载代理URL 所以变了 变了说明没有问题</p><p>至于速度快不快 那是另说了，速度慢的问题自行解决 本人不负责解决。</p><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="使用期间的q-a环节" tabindex="-1"><a class="header-anchor" href="#使用期间的q-a环节"><span><i class="fa-solid fa-circle-q fa-beat-fade" style="color:#409eff;"></i> 使用期间的Q&amp;A环节</span></a></h4><p>Q<sup>1</sup>：<strong>为什么要在cloudflare解析一个域名？</strong></p><p>A<sup>1</sup>：因为 cloudflare 默认自带的域名 <code>xxx.xxx/workers,dev</code>被墙了 无法打开</p><p>Q<sup>2</sup>：<strong>不要看网络上的教程执行<code>netsh interface tcp set global autotuninglevel=disabled</code></strong></p><p>A<sup>2</sup>：会造成pot等播放器缓冲缓慢 如果你pot播放CF中转直链速度不正常 cmd 管理员模式输入 <code>netsh interface tcp set global autotuninglevel=normal</code> 后重启</p><p>Q<sup>3</sup>：<strong>Cloudflare Workers使用有什么问题吗？</strong></p><p>A<sup>3</sup>：有的，Cloudflare Workers 中转AList，AList的端口只能跑在80或者443 否则cf不给入站(否则无法进行中转代理)</p><hr><p><br><br><br></p><h3 id="_2-通用二进制" tabindex="-1"><a class="header-anchor" href="#_2-通用二进制"><span><strong>2. 通用二进制</strong></span></a></h3>',14),dn={href:"https://github.com/alist-org/alist-proxy/releases",target:"_blank",rel:"noopener noreferrer"},vn=l(`<p>使用前也是需要进行授权，授权完使用<code>./alist-proxy -help</code>都有哪些命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@ser452314994926 proxy<span class="token punctuation">]</span><span class="token comment"># chmod +x alist-proxy</span>
<span class="token punctuation">[</span>root@ser452314994926 proxy<span class="token punctuation">]</span><span class="token comment"># ./alist-proxy -help</span>
Usage of ./alist-proxy:
  <span class="token parameter variable">-address</span> string
        alist address
  <span class="token parameter variable">-cert</span> string
        cert <span class="token function">file</span> <span class="token punctuation">(</span>default <span class="token string">&quot;server.crt&quot;</span><span class="token punctuation">)</span>
  <span class="token parameter variable">-help</span>
        show <span class="token builtin class-name">help</span>
  <span class="token parameter variable">-https</span>
        use https protocol.
  <span class="token parameter variable">-key</span> string
        key <span class="token function">file</span> <span class="token punctuation">(</span>default <span class="token string">&quot;server.key&quot;</span><span class="token punctuation">)</span>
  <span class="token parameter variable">-port</span> int
        the proxy port. <span class="token punctuation">(</span>default <span class="token number">5243</span><span class="token punctuation">)</span>
  <span class="token parameter variable">-token</span> string
        alist token
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="简单详细复杂的启动教程" tabindex="-1"><a class="header-anchor" href="#简单详细复杂的启动教程"><span><i class="fa-solid fa-lightbulb fa-bounce" style="color:#409eff;"></i> <strong>简单详细复杂的启动教程</strong></span></a></h4><p>下载程序后启动示例 （填写不需要携带<code>[]</code>符号）</p><ul><li><p><strong>HTTPS方式：</strong>./alist-proxy -address [需要代理的AList域名] -cert [证书路径] -https [启用HTTPS] -key [证书key路径] -token [AListtoken]</p></li><li><p><strong>HTTP方式：</strong>./alist-proxy -address [需要代理的AList域名] -token [AListtoken]</p></li></ul><p>带参数后启动例子</p><ul><li><p><strong>HTTPS方式：</strong>./alist-proxy -address http(s)://alist.org -cert /路径自己放/xxx/server.crt. -https true -key /路径自己放/xxx/server.key -token alist-5229xxxxxxxxxxxxxxxYFnL</p></li><li><p><strong>HTTP方式：</strong>./alist-proxy -address http(s)://alist.org -token alist-5229xxxxxxxxxxxxxxxYFnL</p></li></ul>`,7),mn={href:"https://alist.nn.ci/zh/config/other.html#token",target:"_blank",rel:"noopener noreferrer"},gn=n("strong",null,"令牌",-1),yn=n("p",null,[s("alist-proxy启动默认参数是 5243，有需要的可以带 "),n("code",null,"-port [自定义端口号]"),s(" 启动")],-1),hn=n("p",null,"这个下载代理URL如何添加域名，参考如何给AList程序添加域名的流程一样，进行反向代理添加域名即可",-1),bn=n("p",null,[s("如果不添加域名可以使用 "),n("code",null,"http://IP:5243"),s("填写")],-1),fn={href:"https://alist.nn.ci/zh/guide/install/manual.html#%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B",target:"_blank",rel:"noopener noreferrer"},xn=n("ul",null,[n("li",null,"为什么要守护进程？不守护进程你离开终端程序就停止了。")],-1),_n=l("<li><p>将第8行代码<code>ExecStart=path_alist/alist server</code>这一行里面的 alist server 参数改成上面你需要的就行</p><ul><li>例<sup>1</sup>：<code>ExecStart=path_alist/alist-proxy -address http(s)://alist.org -token alist-5229xxxxxxxxxxxxxxxYFnL</code></li><li>例<sup>2</sup>：<code>ExecStart=path_alist/alist-proxy -address http(s)://alist.org -cert /路径自己写/xxx/server.crt. -https true -key /路径自己写/xxx/server.key -token alist-5229xxxxxxxxxxxxxxxYFnL</code></li></ul></li><li><p>如果你会手动安装AList那肯定也会这个，至于不会手动修改后续出了手动安装Linux AList教程视频的时候会更新过来到时候可能会更明白一些</p></li>",2),wn=l('<figure><img src="'+_+'" alt="通用二进制代理示例" tabindex="0" loading="lazy"><figcaption>通用二进制代理示例</figcaption></figure><p>(左侧图)正常下载是302模式，直接返回了官方的下载链接，然后我们在AList挂载配置里面设置了代理(图右)，然后点击下载同样的文件返回的是代理的IP(因为我使用的是 IP:端口号 方式)</p><h4 id="使用期间的q-a环节-1" tabindex="-1"><a class="header-anchor" href="#使用期间的q-a环节-1"><span><i class="fa-solid fa-circle-q fa-beat-fade" style="color:#409eff;"></i> 使用期间的Q&amp;A环节</span></a></h4><p>Q<sup>1</sup>：使用通用二进制有什么优劣吗？</p><p>A<sup>1</sup>： <strong>优点</strong>是如果代理的机器带宽越大你下载的越快（也是看上行速率的），<strong>缺点</strong>就是比较费流量好像是需要占用双份流量先下载一份，然后代理给你上传一份，在加上机器的流量不是无限的，如果是无限的长期大量占用带宽估计会有封机器风险。</p>',5);function qn(An,Ln){const r=c("BiliBili"),t=c("ExternalLinkIcon"),u=c("YouTube"),i=c("Tabs");return d(),v("div",null,[a(i,{id:"2",data:[{id:"哔哩哔哩"},{id:"YouTube"}],"tab-id":"video"},{title0:p(({value:e,isActive:o})=>[s("哔哩哔哩")]),title1:p(({value:e,isActive:o})=>[s("YouTube")]),tab0:p(({value:e,isActive:o})=>[a(r,{bvid:"BV17N411S7fg"}),n("div",q,[n("p",null,[n("a",A,[L,a(t)])])])]),tab1:p(({value:e,isActive:o})=>[a(u,{id:"jAGl3tIO6qc"}),n("div",T,[n("p",null,[n("a",S,[R,a(t)])])])]),_:1}),E,O,a(i,{id:"28",data:[{id:"Cloudflare Workers"},{id:"通用二进制"}]},{title0:p(({value:e,isActive:o})=>[s("Cloudflare Workers")]),title1:p(({value:e,isActive:o})=>[s("通用二进制")]),tab0:p(({value:e,isActive:o})=>[C,n("p",null,[s("Workers 代码可以在 "),n("a",U,[s("https://github.com/alist-org/alist-proxy/blob/main/alist-proxy.js"),a(t)]),s(" 找到，实际使用时需要替换其中的这两个变量：")]),N,P,D,W]),tab1:p(({value:e,isActive:o})=>[n("p",null,[s("也可以使用另一台机器进行代理，在 "),n("a",H,[s("https://github.com/alist-org/alist-proxy/releases"),a(t)]),s(" 下载程序通过 "),j,s(" 查看使用方法后")]),B]),_:1}),z,I,Y,n("p",null,[s("首先我们先打开 "),F,n("a",M,[s("cloudflare"),a(t)]),s("首页找到左侧侧边栏的"),Q,s("点击新建一个应用程序")]),V,K,Z,G,J,n("p",null,[s("然后我们将AList提供的"),n("a",$,[X,a(t)]),s("代码复制进去，进行修改内容，然后右上角部署保存，保存好后继续回到这个"),nn,s(" 应用程序內")]),sn,n("p",null,[s("添加这些选项之前我们需要先在 "),an,s(),n("a",tn,[s("cloudflare"),a(t)]),s(" 解析一个域名才可以添加")]),n("ul",null,[n("li",null,[s("路由：为了方便区分我们也写和 "),pn,s("应用程序名一样的吧，"),n("a",en,[s("alist-proxy.alist.org/*"),a(t)]),on]),n("li",null,[s("区域：选择我们我们路由使用的域名，"),n("a",ln,[s("alist.org"),a(t)])])]),cn,n("p",null,[s("那么我们在AList后台挂载的"),rn,s("里面填写 "),n("a",un,[s("https://alist-proxy.alist.org"),a(t)]),s(" 即可")]),kn,n("p",null,[s("先来到 "),n("a",dn,[s("alist-proxy二进制 "),a(t)]),s(" 下载二进制程序包，下载好解压出来")]),vn,n("p",null,[n("a",mn,[s(" AList Token是在这里获取"),a(t)]),s(" | AList后台 --> 设置 --> 其他 --> "),gn]),yn,hn,bn,n("ul",null,[n("li",null,[n("p",null,[s("如何进行守护进程这个下载代理URL：参考"),n("a",fn,[s("手动安装AList"),a(t)]),s("文档里面的守护进程方法")]),xn]),_n]),wn])}const Rn=k(w,[["render",qn],["__file","11-durl.html.vue"]]),En=JSON.parse('{"path":"/index/11-durl.html","title":"AList如何使用代理下载链接","lang":"zh-CN","frontmatter":{"title":"AList如何使用代理下载链接","icon":"fa-solid fa-rocket-launch","order":5,"author":"安稳","date":"2023-01-01T00:00:00.000Z","category":["使用指南"],"tag":["AList","代理URL","下载代理"],"sticky":true,"star":true,"headerDepth":6,"description":"下载代理 URL 开启代理时不填写下载代理 URL字段，默认使用本机进行传输。下载代理 URL提供了两种代理方式安装： 我们下面正式开始吧介绍吧 1. Cloudflare Workers 首先我们先打开 cloudflare首页找到左侧侧边栏的Workers和Pages点击新建一个应用程序 新建应用程序的名字随便写，自己知道是做什么的就行，为了方便这...","head":[["meta",{"property":"og:url","content":"https://anwen-anyi/anwen-anyi.github.io/index/11-durl.html"}],["meta",{"property":"og:site_name","content":"安安稳稳"}],["meta",{"property":"og:title","content":"AList如何使用代理下载链接"}],["meta",{"property":"og:description","content":"下载代理 URL 开启代理时不填写下载代理 URL字段，默认使用本机进行传输。下载代理 URL提供了两种代理方式安装： 我们下面正式开始吧介绍吧 1. Cloudflare Workers 首先我们先打开 cloudflare首页找到左侧侧边栏的Workers和Pages点击新建一个应用程序 新建应用程序的名字随便写，自己知道是做什么的就行，为了方便这..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://anwen-anyi/anwen-anyi.github.io/img/proxy/proxy-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-26T09:12:34.000Z"}],["meta",{"property":"article:author","content":"安稳"}],["meta",{"property":"article:tag","content":"AList"}],["meta",{"property":"article:tag","content":"代理URL"}],["meta",{"property":"article:tag","content":"下载代理"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-26T09:12:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AList如何使用代理下载链接\\",\\"image\\":[\\"https://anwen-anyi/anwen-anyi.github.io/img/proxy/proxy-1.png\\",\\"https://anwen-anyi/anwen-anyi.github.io/img/proxy/proxy-2.png\\",\\"https://anwen-anyi/anwen-anyi.github.io/img/proxy/proxy-3.png\\",\\"https://anwen-anyi/anwen-anyi.github.io/img/proxy/proxy-4.png\\",\\"https://anwen-anyi/anwen-anyi.github.io/img/proxy/proxy-5.png\\",\\"https://anwen-anyi/anwen-anyi.github.io/img/proxy/proxy-6.png\\",\\"https://anwen-anyi/anwen-anyi.github.io/img/proxy/proxy-demo.png\\",\\"https://anwen-anyi/anwen-anyi.github.io/img/proxy/alist-proxy-2.png\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-26T09:12:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"安稳\\"}]}"]]},"headers":[{"level":2,"title":"下载代理 URL","slug":"下载代理-url","link":"#下载代理-url","children":[{"level":3,"title":"1. Cloudflare Workers","slug":"_1-cloudflare-workers","link":"#_1-cloudflare-workers","children":[{"level":4,"title":"使用期间的Q&A环节","slug":"使用期间的q-a环节","link":"#使用期间的q-a环节","children":[]}]},{"level":3,"title":"2. 通用二进制","slug":"_2-通用二进制","link":"#_2-通用二进制","children":[{"level":4,"title":"简单详细复杂的启动教程","slug":"简单详细复杂的启动教程","link":"#简单详细复杂的启动教程","children":[]},{"level":4,"title":"使用期间的Q&A环节","slug":"使用期间的q-a环节-1","link":"#使用期间的q-a环节-1","children":[]}]}]}],"git":{"createdTime":1686923963000,"updatedTime":1706260354000,"contributors":[{"name":"AnWen-anyi","email":"anwen_anyi@foxmail.com","commits":6}]},"readingTime":{"minutes":9.09,"words":2727},"filePathRelative":"index/11-durl.md","localizedDate":"2023年1月1日","autoDesc":true,"excerpt":"<!-- 你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。 -->\\n"}');export{Rn as comp,En as data};
